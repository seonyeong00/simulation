# library load
library("dplyr")
library(ggplot2)
# Type 종류 확인
levels(as.factor(DeepLIFT$Type)) # "miRNA" "other" "RBP"   "TF"
#Liver 의 TF 개수 파악, 725개
DeepLIFT %>%
filter(Type == 'TF'& tissue_name == 'Liver') -> TF
#Liver 의 RBP 개수 파악, 170개
DeepLIFT %>%
filter(Type == 'RBP'& tissue_name == 'Liver') -> RBP
#Liver 의 miRNA 개수 파악, 201개
DeepLIFT %>%
filter(Type == 'miRNA'& tissue_name == 'Liver') -> miRNA
#Liver 의 other 개수 파악, 1개
DeepLIFT %>%
filter(Type == 'other'& tissue_name == 'Liver') -> other
# tissue별 df 생성
#Liver
DeepLIFT %>%
filter(tissue_name == 'Liver') -> liver_df
#Adipose_Subcutaneous
DeepLIFT %>%
filter(tissue_name == 'Adipose_Subcutaneous') -> Adipose_Subcutaneous_df
# DeepLIFT mean 기준으로 ordering
liver_df <- liver_df[c(order(-liver_df$shap_mean)),]
# top10 추출
top15_liver <- head(liver_df,15)
# ggplot 이용 bar graph 그리기
ggplot(top15_liver,aes(x=reorder(feat_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 15 in Liver tissue",x = 'gene', y='DeepLIFT score')
# HNF4A gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'HNF4A') ->HNF4A_df
# DeepLIFT mean 기준으로 ordering
HNF4A_df <- HNF4A_df[c(order(-HNF4A_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_HNF4A_df <- head(HNF4A_df,10)
# ggplot
ggplot(top10_HNF4A_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in HNF4A gene",x = 'Tissue', y='DeepLIFT score')
# boxplot
# load DeepLIFT score
DeepLIFT_mean <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
DeepLIFT_mean%>%
filter(tissue_name!="MedianExp")%>%
filter(Type!="other")%>%
group_by(feat_name,Type)%>%
summarise(shap_mean=mean(abs(shap_mean)))%>%
ungroup()%>%
arrange(desc(shap_mean))%>%
mutate(feat_name=paste0(Type,"_",feat_name))%>%
mutate(Var="Gene")-> ds
ds%>%
group_by(Var)%>%
mutate(shap_mean=replace(shap_mean,shap_mean==0,min(shap_mean[shap_mean>0]/2)))%>%
mutate(Type=factor(Type,levels = c("TF","RBP","miRNA")))%>%
ggviolin(., x = "Type", y = "shap_mean", fill = "Type",
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = list(c(1,2),c(1,3),c(2,3)),size=2.5)+
scale_y_log10(1e-10, 0)+
theme_modern(plot.title.size = 20)+
facet_wrap(~Var,ncol = 1)+
theme(legend.position = "none",
strip.text.x = element_text(size = 11))+
d3_fill(label = NULL)+
ylab("DeepLIFT score")+
xlab(NULL)-> p
plot(p)
DeepLIFT_mean%>%
filter(tissue_name!="MedianExp")%>%
filter(Type!="other")%>%
group_by(feat_name,Type)%>%
summarise(shap_mean=mean(abs(shap_mean)))%>%
ungroup()%>%
arrange(desc(shap_mean))%>%
mutate(feat_name=paste0(Type,"_",feat_name))%>%
mutate(Var="Gene")-> ds
View(ds)
# boxplot
# load DeepLIFT score
DeepLIFT_mean <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
View(DeepLIFT_mean)
kmer <- read.csv("C:/Users/seonyeong/Desktop/Ahn_Lab/OV_heatmap/k/ttest_pvalue_005.csv")
View(kmer)
kmer_only <- kmer[,-c(1,2)]
kmer_only_colnames <- colnames(kmer_only)
kmer %>% gather(kmer_only_colnames, key='kmer', value = 'abundance') -> kmer_only_df
# make DeepLIFT score matrix for clustering
rowName=kmer$id # id
length(rowName)
colName=unique(kmer_only_df$kmer)
length(colName)
kmer%>%
dplyr::select(-class,-SampleID)%>%
as.matrix() -> abundance_matrix
kmer%>%
dplyr::select(-id,-trait)%>%
as.matrix() -> abundance_matrix
rownames(abundance_matrix)=rowName
colnames(abundance_matrix) = colName
# make column and row Annotation
ha = rowAnnotation(class = kmer$trait,
col = list(trait = c("0" = "#24A277", "1" = "#EA9423")))
# generate heatmap
abundance_matrix%>%
Heatmap(cluster_rows = TRUE,cluster_columns = TRUE,
right_annotation = ha,
# bottom_annotation = tc,
clustering_method_rows="ward.D2",
clustering_method_columns="ward.D2",
#col = g2_colorRamp2(values = seq(from=-0.06,to=0.06,0.12/6)),
#column_names_max_height = unit(20,"cm"),
#name = "microbiome ttest heatmap"
)->p
show(p)
kmer <- read.csv("C:/Users/seonyeong/Desktop/Ahn_Lab/OV_heatmap/k/ttest_pvalue_001.csv")
kmer_only <- kmer[,-c(1,2)]
kmer_only_colnames <- colnames(kmer_only)
kmer %>% gather(kmer_only_colnames, key='kmer', value = 'abundance') -> kmer_only_df
# make DeepLIFT score matrix for clustering
rowName=kmer$id # id
colName=unique(kmer_only_df$kmer)
kmer%>%
dplyr::select(-id,-trait)%>%
as.matrix() -> abundance_matrix
rownames(abundance_matrix)=rowName
colnames(abundance_matrix) = colName
# make column and row Annotation
ha = rowAnnotation(class = kmer$trait,
col = list(trait = c("0" = "#24A277", "1" = "#EA9423")))
# generate heatmap
abundance_matrix%>%
Heatmap(cluster_rows = TRUE,cluster_columns = TRUE,
right_annotation = ha,
# bottom_annotation = tc,
clustering_method_rows="ward.D2",
clustering_method_columns="ward.D2",
#col = g2_colorRamp2(values = seq(from=-0.06,to=0.06,0.12/6)),
#column_names_max_height = unit(20,"cm"),
#name = "microbiome ttest heatmap"
)->p
show(p)
length(rowName)
length(colName)
kmer <- read.csv("C:/Users/seonyeong/Desktop/Ahn_Lab/OV_heatmap/k/ttest_pvalue_0001.csv")
kmer_only <- kmer[,-c(1,2)]
kmer_only_colnames <- colnames(kmer_only)
kmer %>% gather(kmer_only_colnames, key='kmer', value = 'abundance') -> kmer_only_df
# make DeepLIFT score matrix for clustering
rowName=kmer$id # id
colName=unique(kmer_only_df$kmer)
kmer%>%
dplyr::select(-id,-trait)%>%
as.matrix() -> abundance_matrix
rownames(abundance_matrix)=rowName
colnames(abundance_matrix) = colName
# make column and row Annotation
ha = rowAnnotation(class = kmer$trait,
col = list(trait = c("0" = "#24A277", "1" = "#EA9423")))
# generate heatmap
abundance_matrix%>%
Heatmap(cluster_rows = TRUE,cluster_columns = TRUE,
right_annotation = ha,
# bottom_annotation = tc,
clustering_method_rows="ward.D2",
clustering_method_columns="ward.D2",
#col = g2_colorRamp2(values = seq(from=-0.06,to=0.06,0.12/6)),
#column_names_max_height = unit(20,"cm"),
#name = "microbiome ttest heatmap"
)->p
show(p)
View(DeepLIFT)
View(DeepLIFT_mean)
View(ds)
levels(as.factor(ds$Var))
# data load
DeepLIFT <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
# library load
library("dplyr")
library(ggplot2)
# Type 종류 확인
levels(as.factor(DeepLIFT$Type)) # "miRNA" "other" "RBP"   "TF"
#Liver 의 TF 개수 파악, 725개
DeepLIFT %>%
filter(Type == 'TF'& tissue_name == 'Liver') -> TF
#Liver 의 RBP 개수 파악, 170개
DeepLIFT %>%
filter(Type == 'RBP'& tissue_name == 'Liver') -> RBP
#Liver 의 miRNA 개수 파악, 201개
DeepLIFT %>%
filter(Type == 'miRNA'& tissue_name == 'Liver') -> miRNA
#Liver 의 other 개수 파악, 1개
DeepLIFT %>%
filter(Type == 'other'& tissue_name == 'Liver') -> other
# tissue별 df 생성
#Liver
DeepLIFT %>%
filter(tissue_name == 'Liver') -> liver_df
#Adipose_Subcutaneous
DeepLIFT %>%
filter(tissue_name == 'Adipose_Subcutaneous') -> Adipose_Subcutaneous_df
# DeepLIFT mean 기준으로 ordering
liver_df <- liver_df[c(order(-liver_df$shap_mean)),]
# top10 추출
top15_liver <- head(liver_df,15)
# ggplot 이용 bar graph 그리기
ggplot(top15_liver,aes(x=reorder(feat_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 15 in Liver tissue",x = 'gene', y='DeepLIFT score')
# HNF4A gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'HNF4A') ->HNF4A_df
# DeepLIFT mean 기준으로 ordering
HNF4A_df <- HNF4A_df[c(order(-HNF4A_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_HNF4A_df <- head(HNF4A_df,10)
# ggplot
ggplot(top10_HNF4A_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in HNF4A gene",x = 'Tissue', y='DeepLIFT score')
#data
actual = read.csv("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/new_data/actual.csv")
actual= actual[,-c(1,2)]
pred = read.csv("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/new_data/pred.csv")
pred= pred[,-c(1)]
#library
library(tidyr)
actual %>% gather('Adipose_Subcutaneous', 'Adipose_Visceral_Omentum',
'Adrenal_Gland', 'Artery_Aorta', 'Artery_Coronary', 'Artery_Tibial',
'Bladder', 'Brain_Amygdala', 'Brain_Anterior_cingulate_cortex_BA24',
'Brain_Caudate_basal_ganglia', 'Brain_Cerebellar_Hemisphere',
'Brain_Cerebellum', 'Brain_Cortex', 'Brain_Frontal_Cortex_BA9',
'Brain_Hippocampus', 'Brain_Hypothalamus',
'Brain_Nucleus_accumbens_basal_ganglia', 'Brain_Putamen_basal_ganglia',
'Brain_Spinal_cord_cervical_c_1', 'Brain_Substantia_nigra',
'Breast_Mammary_Tissue', 'Cells_EBV_transformed_lymphocytes',
'Cells_Transformed_fibroblasts', 'Cervix_Ectocervix',
'Cervix_Endocervix', 'Colon_Sigmoid', 'Colon_Transverse',
'Esophagus_Gastroesophageal_Junction', 'Esophagus_Mucosa',
'Esophagus_Muscularis', 'Fallopian_Tube', 'Heart_Atrial_Appendage',
'Heart_Left_Ventricle', 'Kidney_Cortex', 'Liver', 'Lung',
'Minor_Salivary_Gland', 'Muscle_Skeletal', 'Nerve_Tibial', 'Ovary',
'Pancreas', 'Pituitary', 'Prostate', 'Skin_Not_Sun_Exposed_Suprapubic',
'Skin_Sun_Exposed_Lower_leg', 'Small_Intestine_Terminal_Ileum',
'Spleen', 'Stomach', 'Testis', 'Thyroid', 'Uterus', 'Vagina',
'Whole_Blood', 'MedianExp', key='tissue', value = 'actual') -> actual
pred %>% gather('Adipose_Subcutaneous', 'Adipose_Visceral_Omentum',
'Adrenal_Gland', 'Artery_Aorta', 'Artery_Coronary', 'Artery_Tibial',
'Bladder', 'Brain_Amygdala', 'Brain_Anterior_cingulate_cortex_BA24',
'Brain_Caudate_basal_ganglia', 'Brain_Cerebellar_Hemisphere',
'Brain_Cerebellum', 'Brain_Cortex', 'Brain_Frontal_Cortex_BA9',
'Brain_Hippocampus', 'Brain_Hypothalamus',
'Brain_Nucleus_accumbens_basal_ganglia', 'Brain_Putamen_basal_ganglia',
'Brain_Spinal_cord_cervical_c_1', 'Brain_Substantia_nigra',
'Breast_Mammary_Tissue', 'Cells_EBV_transformed_lymphocytes',
'Cells_Transformed_fibroblasts', 'Cervix_Ectocervix',
'Cervix_Endocervix', 'Colon_Sigmoid', 'Colon_Transverse',
'Esophagus_Gastroesophageal_Junction', 'Esophagus_Mucosa',
'Esophagus_Muscularis', 'Fallopian_Tube', 'Heart_Atrial_Appendage',
'Heart_Left_Ventricle', 'Kidney_Cortex', 'Liver', 'Lung',
'Minor_Salivary_Gland', 'Muscle_Skeletal', 'Nerve_Tibial', 'Ovary',
'Pancreas', 'Pituitary', 'Prostate', 'Skin_Not_Sun_Exposed_Suprapubic',
'Skin_Sun_Exposed_Lower_leg', 'Small_Intestine_Terminal_Ileum',
'Spleen', 'Stomach', 'Testis', 'Thyroid', 'Uterus', 'Vagina',
'Whole_Blood', 'MedianExp', key='tissue', value = 'pred') -> pred
merge = cbind(actual,pred[,3])
colnames(merge)
merge = rename(merge,pred = "pred[, 3]")
merge = rename(merge,gene = "geneID")
saveRDS(merge,"merge.rds")
#library load
options(stringsAsFactors = FALSE)
library(see)
library(tidyverse)
library(ggpubr)
library(circlize)
library(ComplexHeatmap)
library(dplyr)
library(ggplot2)
library(hexbin)
source("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/fig_util.R")
ds <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/new_data/merge.rds")
# gene-level ###
ds %>%
filter(tissue%in%"MedianExp")  -> data
ggplot(data,aes(pred,actual))+
geom_hex()+
scale_fill_flat_c(name="") +
theme_modern()+
stat_cor(method="spearman")+
ggtitle("Gene-level")+
xlab("Prediction, log-TPM")+
ylab("Actual, log-TPM") -> p
plot(p)
ggplot(data,aes(pred,actual))+
geom_hex()+
scale_fill_flat_c(name="") +
theme_modern()+
stat_cor(method="spearman")+
ggtitle("Gene")+
xlab("Prediction, log-TPM")+
ylab("Actual, log-TPM") -> p
plot(p)
DeepLIFT <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
View(DeepLIFT)
#boxplot
DeepLIFT_mean%>%
filter(tissue_name!="MedianExp")%>%
filter(Type!="other")%>%
group_by(feat_name,Type)%>%
summarise(shap_mean=mean(abs(shap_mean)))%>%
ungroup()%>%
arrange(desc(shap_mean))%>%
mutate(feat_name=paste0(Type,"_",feat_name))%>%
mutate(Var="Gene")-> ds
DeepLIFT_mean <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
#boxplot
DeepLIFT_mean%>%
filter(tissue_name!="MedianExp")%>%
filter(Type!="other")%>%
group_by(feat_name,Type)%>%
summarise(shap_mean=mean(abs(shap_mean)))%>%
ungroup()%>%
arrange(desc(shap_mean))%>%
mutate(feat_name=paste0(Type,"_",feat_name))%>%
mutate(Var="Gene")-> ds
View(DeepLIFT_mean)
View(ds)
ds <- subset(DeepLIFT_mean,feat_name=="HNF4A")
DeepLIFT_mean %>%
filter(feat_name == 'HNF4A'& feat_name == 'RXRA') -> ds
DeepLIFT_mean %>%
filter(feat_name == 'HNF4A'or feat_name == 'RXRA') -> ds
DeepLIFT_mean %>%
filter(feat_name == 'HNF4A'| feat_name == 'RXRA') -> ds
DeepLIFT_mean %>%
filter(tissue_name!="MedianExp")%>%
filter(feat_name == 'HNF4A'| feat_name == 'RXRA') -> ds
DeepLIFT_mean %>%
filter(tissue_name!="MedianExp")%>%
filter(feat_name == c('HNF4A', 'RXRA') ) -> ds
DeepLIFT_mean %>%
filter(tissue_name!="MedianExp")%>%
filter(feat_name == 'HNF4A'| feat_name == 'RXRA'| feat_name == 'ATF3') -> ds
levels(as.factor(ds$Type))
#boxplot
ds%>%
mutate(feat_name=factor(feat_name,levels = c("HNF4A","RXRA","ATF3")))%>%
ggviolin(., x = "feat_name", y = "shap_mean", fill = "feat_name",
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = list(c(1,2),c(1,3),c(2,3)),size=2.5)+
scale_y_log10(1e-10, 0)+
theme_modern(plot.title.size = 20)+
facet_wrap(~Var,ncol = 1)+
theme(legend.position = "none",
strip.text.x = element_text(size = 11))+
d3_fill(label = NULL)+
ylab("DeepLIFT score")+
xlab(NULL)-> p
options(stringsAsFactors = FALSE)
#install.packages("see")
library(see)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)
#install.packages("circlize")
library(circlize)
#install.packages("ComplexHeatmap")
library(ComplexHeatmap)
#install.packages("dplyr")
library(dplyr)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("hexbin")
library(hexbin)
source("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/fig_util.R")
#boxplot
ds%>%
mutate(feat_name=factor(feat_name,levels = c("HNF4A","RXRA","ATF3")))%>%
ggviolin(., x = "feat_name", y = "shap_mean", fill = "feat_name",
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = list(c(1,2),c(1,3),c(2,3)),size=2.5)+
scale_y_log10(1e-10, 0)+
theme_modern(plot.title.size = 20)+
facet_wrap(~Var,ncol = 1)+
theme(legend.position = "none",
strip.text.x = element_text(size = 11))+
d3_fill(label = NULL)+
ylab("DeepLIFT score")+
xlab(NULL)-> p
plot(p)
DeepLIFT_mean %>%
filter(tissue_name!="MedianExp")%>%
filter(feat_name == 'HNF4A'| feat_name == 'RXRA'| feat_name == 'ATF3') %>%
mutate(Var="TF")-> ds
#boxplot
ds%>%
group_by(Var)%>%
mutate(feat_name=factor(feat_name,levels = c("HNF4A","RXRA","ATF3")))%>%
ggviolin(., x = "feat_name", y = "shap_mean", fill = "feat_name",
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = list(c(1,2),c(1,3),c(2,3)),size=2.5)+
scale_y_log10(1e-10, 0)+
theme_modern(plot.title.size = 20)+
facet_wrap(~Var,ncol = 1)+
theme(legend.position = "none",
strip.text.x = element_text(size = 11))+
d3_fill(label = NULL)+
ylab("DeepLIFT score")+
xlab(NULL)-> p
plot(p)
# RXRA gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'RXRA') ->RXRA_df
# data load
DeepLIFT <- readRDS("C:/Users/seonyeong/Desktop/SystemBiology/team project/simulation/test_Chr1/DeepLIFT_mean.rds")
# library load
library("dplyr")
library(ggplot2)
# Type 종류 확인
levels(as.factor(DeepLIFT$Type)) # "miRNA" "other" "RBP"   "TF"
#Liver 의 TF 개수 파악, 725개
DeepLIFT %>%
filter(Type == 'TF'& tissue_name == 'Liver') -> TF
#Liver 의 RBP 개수 파악, 170개
DeepLIFT %>%
filter(Type == 'RBP'& tissue_name == 'Liver') -> RBP
#Liver 의 miRNA 개수 파악, 201개
DeepLIFT %>%
filter(Type == 'miRNA'& tissue_name == 'Liver') -> miRNA
#Liver 의 other 개수 파악, 1개
DeepLIFT %>%
filter(Type == 'other'& tissue_name == 'Liver') -> other
# tissue별 df 생성
#Liver
DeepLIFT %>%
filter(tissue_name == 'Liver') -> liver_df
#Adipose_Subcutaneous
DeepLIFT %>%
filter(tissue_name == 'Adipose_Subcutaneous') -> Adipose_Subcutaneous_df
# DeepLIFT mean 기준으로 ordering
liver_df <- liver_df[c(order(-liver_df$shap_mean)),]
# top10 추출
top15_liver <- head(liver_df,15)
# ggplot 이용 bar graph 그리기
ggplot(top15_liver,aes(x=reorder(feat_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 15 in Liver tissue",x = 'gene', y='DeepLIFT score')
# HNF4A gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'HNF4A') ->HNF4A_df
# DeepLIFT mean 기준으로 ordering
HNF4A_df <- HNF4A_df[c(order(-HNF4A_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_HNF4A_df <- head(HNF4A_df,10)
# ggplot
ggplot(top10_HNF4A_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in HNF4A gene",x = 'Tissue', y='DeepLIFT score')
# RXRA gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'RXRA') ->RXRA_df
# DeepLIFT mean 기준으로 ordering
RXRA_df <- RXRA_df[c(order(-RXRA_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_RXRA_df <- head(RXRA_df,10)
# ggplot
ggplot(top10_RXRA_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in RXRA gene",x = 'Tissue', y='DeepLIFT score')
# ggplot
ggplot(top10_RXRA_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=Type))+
geom_bar()+
labs(title = "DeepLIFT score Top 10 in RXRA gene",x = 'Tissue', y='DeepLIFT score')
# ggplot
ggplot(top10_RXRA_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in RXRA gene",x = 'Tissue', y='DeepLIFT score')
# ggplot
ggplot(top10_RXRA_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=tissue_name))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in RXRA gene",x = 'Tissue', y='DeepLIFT score')
# ggplot
ggplot(top10_HNF4A_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=tissue_name))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in HNF4A gene",x = 'Tissue', y='DeepLIFT score')
# ATF3 gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'ATF3') ->ATF3_df
# DeepLIFT mean 기준으로 ordering
ATF3_df <- ATF3_df[c(order(-ATF3_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_ATF3_df <- head(ATF3_df,10)
# ggplot
ggplot(top10_ATF3_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=tissue_name))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in ATF3 gene",x = 'Tissue', y='DeepLIFT score')
# HNF4A gene에 대해서 ..
DeepLIFT %>%
filter(feat_name == 'HNF4A') ->HNF4A_df
# DeepLIFT mean 기준으로 ordering
HNF4A_df <- HNF4A_df[c(order(-HNF4A_df$shap_mean)),]
# 상위 10개 tissue 추출
top10_HNF4A_df <- head(HNF4A_df,10)
# ggplot
ggplot(top10_HNF4A_df,aes(x=reorder(tissue_name, -shap_mean),y=shap_mean,fill=tissue_name))+
geom_bar(stat="identity")+
labs(title = "DeepLIFT score Top 10 in HNF4A gene",x = 'Tissue', y='DeepLIFT score')
